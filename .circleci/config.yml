# version: 2.1
# jobs:
#   build:
#     docker:
#       - image: circleci/node
#     steps:
#       - checkout
#       - run: echo "build"
#   pretest:
#     docker:
#       - image: circleci/node
#     steps:
#       - checkout
#       - run: echo "pretest"       
#       - run: 
#           command: |
#             echo "export Hi=Henna" >> $BASH_ENV   
#       - run : echo ${Hi}      
           
#   test:
#     parameters:
#       p:
#         type: integer
#         default: 2
#     docker:
#       - image: circleci/node    
#     parallelism: << parameters.p >>
#     steps:
#       - checkout
#       - run: echo "test"
# #       - run:  
# #           command: |
# #             if [ << pipeline.git.branch >> = master ]; then
# #                echo << parameters.p >> = 2
# #             else  
# #               echo << parameters.p >> = 4
# #             fi
# #       - run:  
# #           command: |
# #             if [ << pipeline.parameters.action >> = build ]; then
# #                echo << parameters.p >> = 2
# #             else  
# #               echo << parameters.p >> = 4
# #             fi
#       - run : echo << parameters.p >>      
# workflows:
#   first_workflow:
# #     when:
# #       equal: [ build, << pipeline.parameters.action >> ]
#     jobs:
#       - build:
#           filters:
#             branches:
#               ignore :
#                 - master
# #       - pretest        
#       - test:
#           requires:
#             - build
#   second_workflow:
#     jobs:
#       - build:
#           filters:
#             branches:
#               only:
#                 - master
#       - pretest
#       - test:
#           p: 4
#           requires:
#             - build


version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip
      - run:
          name: "Create Environment file"
          command: |
            mkdir .env

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: "install composer"
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('sha384', 'composer-setup.php') === 'e0012edf3e80b6978849f5eff0d4b4e4c79ff1609dd1e613307e16318854d24ae64f26d17af3ef0bf7cfb710ca74755a') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      # prepare the database
      - run:
          name: "Create database and run migration"
          Command: |
            touch storage/testing.sqlite
            php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit
      - run:
          name: "Run Unit Tests"
          command: ./vendor/bin/phpunit tests/Unit

      - run:
          name: "Run Feature Tests"
          command: ./vendor/bin/phpunit tests/Feature
