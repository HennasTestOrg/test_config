#test 

# version: 2.1
# jobs:
#   build:
#     docker:
#       - image: circleci/node
#     steps:
#       - checkout
#       - run: echo "build"
#   pretest:
#     docker:
#       - image: circleci/node
#     steps:
#       - checkout
#       - run: echo "pretest"       
#       - run: 
#           command: |
#             echo "export Hi=Henna" >> $BASH_ENV   
#       - run : echo ${Hi}      
           
#   test:
#     parameters:
#       p:
#         type: integer
#         default: 2
#     docker:
#       - image: circleci/node    
#     parallelism: << parameters.p >>
#     steps:
#       - checkout
#       - run: echo "test"
# #       - run:  
# #           command: |
# #             if [ << pipeline.git.branch >> = master ]; then
# #                echo << parameters.p >> = 2
# #             else  
# #               echo << parameters.p >> = 4
# #             fi
# #       - run:  
# #           command: |
# #             if [ << pipeline.parameters.action >> = build ]; then
# #                echo << parameters.p >> = 2
# #             else  
# #               echo << parameters.p >> = 4
# #             fi
#       - run : echo << parameters.p >>      
# workflows:
#   first_workflow:
# #     when:
# #       equal: [ build, << pipeline.parameters.action >> ]
#     jobs:
#       - build:
#           filters:
#             branches:
#               ignore :
#                 - master
# #       - pretest        
#       - test:
#           requires:
#             - build
#   second_workflow:
#     jobs:
#       - build:
#           filters:
#             branches:
#               only:
#                 - master
#       - pretest
#       - test:
#           p: 4
#           requires:
#             - build


# version: 2
# jobs:
#   build:
#     docker:
#       # Specify the version you desire here
#       - image: circleci/php:7.4-node-browsers

#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # Using the RAM variation mitigates I/O contention
#       # for database intensive operations.
#       # - image: circleci/mysql:5.7-ram
#       #
#       # - image: redis:2.8.19

#     steps:
#       - checkout

#       - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
#       - run: sudo docker-php-ext-install zip
#       - run:
#           name: "Create Environment file"
#           command: |
#             mkdir .env

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#             # "composer.lock" can be used if it is committed to the repo
#             - v1-dependencies-{{ checksum "composer.json" }}
#             # fallback to using the latest cache if no exact match is found
#             - v1-dependencies-
#       - run:
#           name: "install composer"
#           command: |
#             php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
#             php -r "if (hash_file('sha384', 'composer-setup.php') === 'e0012edf3e80b6978849f5eff0d4b4e4c79ff1609dd1e613307e16318854d24ae64f26d17af3ef0bf7cfb710ca74755a') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
#             php composer-setup.php
#             php -r "unlink('composer-setup.php');"

#       - save_cache:
#           key: v1-dependencies-{{ checksum "composer.json" }}
#           paths:
#             - ./vendor
#       - restore_cache:
#           keys:
#             - node-v1-{{ checksum "package.json" }}
#             - node-v1-
#       - run: yarn install
#       - save_cache:
#           key: node-v1-{{ checksum "package.json" }}
#           paths:
#             - node_modules

#       # prepare the database
#       - run:
#           name: "Create database and run migration"
#           Command: |
#             touch storage/testing.sqlite
#             php artisan migrate --env=testing --database=sqlite_testing --force

#       # run tests with phpunit
#       - run:
#           name: "Run Unit Tests"
#           command: ./vendor/bin/phpunit tests/Unit

#       - run:
#           name: "Run Feature Tests"
#           command: ./vendor/bin/phpunit tests/Feature
# version: 2.1

# jobs:
#   build:
#     machine:
#       image: ubuntu-1604:201903-01
#     steps:
#       - run: sudo apt-get update
#       - run: sudo apt install -y openjdk-11-jdk
#       - checkout
#       - run:
#           name: "Testing"
#           command: echo "Hi"

# version: 2.0
# jobs:
#   build:
#     docker:
#       - image: circleci/ruby:2.4.2-jessie-node
#     steps:
#       - checkout
#       - run:
#           name: "Update Node.js and npm"
#           command: |
#             curl -sSL "https://nodejs.org/dist/v11.10.0/node-v11.10.0-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v11.10.0-linux-x64/bin/node
#             curl https://www.npmjs.com/install.sh | sudo bash
#       - run:
#           name: Check current version of node
#           command: node -v
# version: 2.1
# executors:
#   my-executor:
#     docker:
#       - image: circleci/ruby:2.5.1-node-browsers
#       - image: circleci/node  
      
#   my-other-executor:
#     docker:
#       - image: circleci/node    

# jobs:
#   my-job:
#     executor: 
#            - my-executor
# #            - my-other-executor
#     steps:
#       - run: echo "outside the executor"




# workflows:
#  Example_Workflow:
#    jobs:
#      - my-job

version: 2.1
jobs:
  build:
    docker: 
      - image: circleci/node
#       - image: circleci/ruby:2.5.1-node-browsers
#     parallelism: 6
    steps:
      - run: echo "hello world 1" # ru
workflows:
  version: 2
  default:
    jobs:
      - build:
          filters:
            branches:
              only: master



# version: 2.1
# orbs:
#   ruby: circleci/ruby@0.1.2

# jobs:
#  build:
#    docker:
#      - image: circleci/ruby:2.6.3-stretch-node
#    executor: ruby/default
#    steps:
#      - checkout
#      - run:
#          name: bundle install
#          command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3


#   test:  # our next job, called "test"
#     # we run "parallel job containers" to enable speeding up our tests;
#     # this splits our tests across multiple containers.
#     parallelism: 1
#     # here we set TWO docker images.
#     docker:
#       - image: circleci/ruby:2.6.3-stretch-node
#       - image: circleci/postgres:9.5-alpine
#         environment: # add POSTGRES environment variables.
#           POSTGRES_USER: circleci-demo-ruby
#           POSTGRES_DB: rails_blog_test
#           POSTGRES_PASSWORD: "test"
#       - image: circleci/redis:4.0.9
#         environment:
#           - REDIS_URL: "redis://localhost:6379/"
#       - image: docker.elastic.co/elasticsearch/elasticsearch:6.2.2
#         environment:
#           - cluster.name: elasticsearch
#           - xpack.security.enabled: false
#           - transport.host: localhost
#           - network.host: 127.0.0.1
#           - http.port: 9200
#           - discovery.type: single-node
#     # environment variables specific to Ruby/Rails, applied to the primary container.
#     environment:
#       BUNDLE_JOBS: "3"
#       BUNDLE_RETRY: "3"
#       BUNDLE_PATH: vendor/bundle
#       PGHOST: 127.0.0.1
#       PGUSER: circleci-demo-ruby
#       PGPASSWORD: "test"
#       RAILS_ENV: test
#     # A series of steps to run, some are similar to those in "build".
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - bundle-{{ arch }}-{{ checksum "Gemfile.lock" }}
#       - run: bundle install
#       - save_cache:
#           paths:
#             - ./vendor/bundle
#           key: bundle-{{ arch }}-{{ checksum "Gemfile.lock" }}
#       - persist_to_workspace:
#           root: .
#           paths:
#             - vendor/bundle
#       - run:
#           name: copy configs
#           command: cp config/ci_database.yml.example  config/database.yml
#       - run:
#           name: Wait for DB
#           command: dockerize -wait tcp://localhost:5432 -timeout 1m
#       - run:
#           name: Wait for Redis
#           command: dockerize -wait tcp://localhost:6379 -timeout 1m
#       - run:
#           name: Database create
#           command: bundle exec rails db:create
#       - run:
#           name: Database setup
#           command: bundle exec rails db:schema:load --trace
# #      - run:
# #          name: prepare tests
# #          command: bundle exec rails db:test:prepare
#       - run:
#           name: copy ENV
#           command: cp config/ci_application.yml  config/application.yml
#       - run:
#           name: run tests
#           command: bundle exec rspec spec/*

# workflows:
#   version: 2
#   build_and_test:
#     jobs:
# #      - build
#       - test
